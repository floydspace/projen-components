// copied from https://github.com/guillaumemaka/of-node-projen/blob/main/test/util.ts under Apache-2.0 License
import * as os from "os";
import path from "path";
import fs from "fs-extra";
import { Project } from "projen";

/**
 * files generated by projen
 */
export interface SynthOutput {
  [filePath: string]: any;
}

/**
 * creates a temporary directory for the projen project
 *
 * @returns {string} the path to the temporary directory
 */
export function mkdtemp() {
  return fs.mkdtempSync(path.join(os.tmpdir(), "projen-test-"));
}

/**
 *
 * generates the files for the project
 *
 * @param project the project to synthesize
 * @returns the files generated
 */
export function synthSnapshot(project: Project) {
  try {
    process.env.PROJEN_DISABLE_POST = "true";
    project.synth();
    return directorySnapshot(project.outdir);
  } finally {
    fs.removeSync(project.outdir);
  }
}

// /**
//  *
//  * @param project
//  * @param {...any} includeFiles
//  */
// export function synthSnapshotWithPost(
//   project: Project,
//   ...includeFiles: string[]
// ) {
//   try {
//     project.synth();
//     return directorySnapshot(project.outdir, includeFiles);
//   } finally {
//     fs.removeSync(project.outdir);
//   }
// }

/**
 *
 * returns the files in the directory
 *
 * @param root the root directory to snapshot
 * @returns the files in the directory
 */
function directorySnapshot(root: string) {
  const output: SynthOutput = {};

  const readdir = (relativeDirectory: string) => {
    const directoryPath = path.join(root, relativeDirectory);
    for (const file of fs.readdirSync(directoryPath)) {
      const filePath = path.join(directoryPath, file);
      const relativePath = path.join(relativeDirectory, file);
      if (fs.statSync(filePath).isDirectory()) {
        readdir(relativePath);
        continue;
      }

      let content = fs.readFileSync(filePath, "utf8");
      if (path.extname(filePath) === ".json") {
        if (content.startsWith("//")) {
          content = content.substring(content.indexOf("\n") + 1);
        }
        content = JSON.parse(content);
      }

      output[relativePath] = content;
    }
  };

  readdir(".");

  return output;
}
